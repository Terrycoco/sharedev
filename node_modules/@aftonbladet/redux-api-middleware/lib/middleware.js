'use strict';

exports.__esModule = true;
exports.apiMiddleware = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _CALL_API = require('./CALL_API');

var _CALL_API2 = _interopRequireDefault(_CALL_API);

var _validation = require('./validation');

var _errors = require('./errors');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A Redux middleware that processes RSAA actions.
 *
 * @type {ReduxMiddleware}
 * @access public
 */
function apiMiddleware(_ref) {
  var _this = this;

  var getState = _ref.getState;

  return function (next) {
    return function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(action) {
        var validationErrors, _callAPI, _requestType, callAPI, endpoint, headers, _callAPI$options, options, method, body, credentials, bailout, types, cache, _normalizeTypeDescrip, requestType, successType, failureType, res, _action;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if ((0, _validation.isRSAA)(action)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return', next(action));

              case 2:

                // Try to dispatch an error request FSA for invalid RSAAs
                validationErrors = (0, _validation.validateRSAA)(action);

                if (!validationErrors.length) {
                  _context.next = 7;
                  break;
                }

                _callAPI = action[_CALL_API2.default];

                if (_callAPI.types && Array.isArray(_callAPI.types)) {
                  _requestType = _callAPI.types[0];

                  if (_requestType && _requestType.type) {
                    _requestType = _requestType.type;
                  }
                  next({
                    type: _requestType,
                    payload: new _errors.InvalidRSAA(validationErrors),
                    error: true
                  });
                }
                return _context.abrupt('return');

              case 7:

                // Parse the validated RSAA action
                callAPI = action[_CALL_API2.default];
                endpoint = callAPI.endpoint;
                headers = callAPI.headers;
                _callAPI$options = callAPI.options;
                options = _callAPI$options === undefined ? {} : _callAPI$options;
                method = callAPI.method;
                body = callAPI.body;
                credentials = callAPI.credentials;
                bailout = callAPI.bailout;
                types = callAPI.types;
                cache = callAPI.cache;
                _normalizeTypeDescrip = (0, _util.normalizeTypeDescriptors)(types);
                requestType = _normalizeTypeDescrip[0];
                successType = _normalizeTypeDescrip[1];
                failureType = _normalizeTypeDescrip[2];

                // Should we bail out?

                _context.prev = 22;

                if (!(typeof bailout === 'boolean' && bailout || typeof bailout === 'function' && bailout(getState()))) {
                  _context.next = 25;
                  break;
                }

                return _context.abrupt('return');

              case 25:
                _context.next = 33;
                break;

              case 27:
                _context.prev = 27;
                _context.t0 = _context['catch'](22);
                _context.next = 31;
                return (0, _util.actionWith)((0, _extends3.default)({}, requestType, {
                  payload: new _errors.RequestError('[CALL_API].bailout function failed'),
                  error: true
                }), [action, getState()]);

              case 31:
                _context.t1 = _context.sent;
                return _context.abrupt('return', next(_context.t1));

              case 33:
                if (!(typeof endpoint === 'function')) {
                  _context.next = 44;
                  break;
                }

                _context.prev = 34;

                endpoint = endpoint(getState());
                _context.next = 44;
                break;

              case 38:
                _context.prev = 38;
                _context.t2 = _context['catch'](34);
                _context.next = 42;
                return (0, _util.actionWith)((0, _extends3.default)({}, requestType, {
                  payload: new _errors.RequestError('[CALL_API].endpoint function failed'),
                  error: true
                }), [action, getState()]);

              case 42:
                _context.t3 = _context.sent;
                return _context.abrupt('return', next(_context.t3));

              case 44:
                if (!cache) {
                  _context.next = 69;
                  break;
                }

                _context.prev = 45;
                _context.next = 48;
                return cache.has(endpoint);

              case 48:
                if (!_context.sent) {
                  _context.next = 61;
                  break;
                }

                _context.t4 = successType;
                _context.t5 = action;
                _context.t6 = getState();
                _context.next = 54;
                return cache.get(endpoint);

              case 54:
                _context.t7 = _context.sent;
                _context.t8 = (0, _util.fakeJsonResponse)(_context.t7);
                _context.t9 = [_context.t5, _context.t6, _context.t8];
                _context.next = 59;
                return (0, _util.actionWith)(_context.t4, _context.t9);

              case 59:
                _context.t10 = _context.sent;
                return _context.abrupt('return', next(_context.t10));

              case 61:
                _context.next = 69;
                break;

              case 63:
                _context.prev = 63;
                _context.t11 = _context['catch'](45);
                _context.next = 67;
                return (0, _util.actionWith)((0, _extends3.default)({}, requestType, {
                  payload: new _errors.RequestError('[CALL_API].cache API function failed: ' + _context.t11.message),
                  error: true
                }), [action, getState()]);

              case 67:
                _context.t12 = _context.sent;
                return _context.abrupt('return', next(_context.t12));

              case 69:
                if (!(typeof headers === 'function')) {
                  _context.next = 80;
                  break;
                }

                _context.prev = 70;

                headers = headers(getState());
                _context.next = 80;
                break;

              case 74:
                _context.prev = 74;
                _context.t13 = _context['catch'](70);
                _context.next = 78;
                return (0, _util.actionWith)((0, _extends3.default)({}, requestType, {
                  payload: new _errors.RequestError('[CALL_API].headers function failed'),
                  error: true
                }), [action, getState()]);

              case 78:
                _context.t14 = _context.sent;
                return _context.abrupt('return', next(_context.t14));

              case 80:
                if (!(typeof options === 'function')) {
                  _context.next = 91;
                  break;
                }

                _context.prev = 81;

                options = options(getState());
                _context.next = 91;
                break;

              case 85:
                _context.prev = 85;
                _context.t15 = _context['catch'](81);
                _context.next = 89;
                return (0, _util.actionWith)((0, _extends3.default)({}, requestType, {
                  payload: new _errors.RequestError('[CALL_API].options function failed'),
                  error: true
                }), [action, getState()]);

              case 89:
                _context.t16 = _context.sent;
                return _context.abrupt('return', next(_context.t16));

              case 91:
                _context.next = 93;
                return (0, _util.actionWith)(requestType, [action, getState()]);

              case 93:
                _context.t17 = _context.sent;
                next(_context.t17);
                _context.prev = 95;
                _context.next = 98;
                return (0, _isomorphicFetch2.default)(endpoint, (0, _extends3.default)({}, options, {
                  method: method, body: body, credentials: credentials, headers: headers
                }));

              case 98:
                res = _context.sent;
                _context.next = 107;
                break;

              case 101:
                _context.prev = 101;
                _context.t18 = _context['catch'](95);
                _context.next = 105;
                return (0, _util.actionWith)((0, _extends3.default)({}, requestType, {
                  payload: new _errors.RequestError(_context.t18.message),
                  error: true
                }), [action, getState()]);

              case 105:
                _context.t19 = _context.sent;
                return _context.abrupt('return', next(_context.t19));

              case 107:
                if (!res.ok) {
                  _context.next = 115;
                  break;
                }

                _context.next = 110;
                return (0, _util.actionWith)(successType, [_action, getState(), res]);

              case 110:
                _action = _context.sent;

                if (cache) {
                  cache.set(endpoint, _action.payload);
                }
                return _context.abrupt('return', next(_action));

              case 115:
                _context.next = 117;
                return (0, _util.actionWith)((0, _extends3.default)({}, failureType, {
                  error: true
                }), [action, getState(), res]);

              case 117:
                _context.t20 = _context.sent;
                return _context.abrupt('return', next(_context.t20));

              case 119:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this, [[22, 27], [34, 38], [45, 63], [70, 74], [81, 85], [95, 101]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  };
}

exports.apiMiddleware = apiMiddleware;